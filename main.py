import pandas as pd

import numpy as np


("Series — это объект, который похож на одномерный массив и может содержать любые типы данных. "
 "Проще всего представить его как столбец таблицы с последовательностью каких-либо значений,"
 " у каждого из которых есть индекс — номер строки.")
series_example = pd.Series([4, 7, -5, 3])
print(series_example)
"Series отображается в виде таблицы с индексами элементов в первом столбце и значениями во втором."



"DataFrame — основной тип данных в Pandas, вокруг которого строится вся работа. Его можно представить "
"в виде обычной таблицы с любым количеством столбцов и строк. Внутри ячеек такой «таблицы» могут быть "
"данные самого разного типа: числовые, булевы, строковые и так далее."

city = {'Город': ['Москва', 'Санкт-Петербург', 'Новосибирск', 'Екатеринбург'],
        'Год основания': [1147, 1703, 1893, 1723],
        'Население': [11.9, 4.9, 1.5, 1.4]} # Создаём словарь с нужной информацией о городах.

df = pd.DataFrame(city) # Превращаем словарь в DataFrame, используя стандартный метод библиотеки.
print(df)
("Мы видим таблицу, строки которой имеют индексы от 0 до 3, а «индексы» столбцов соответствуют их названиям."
 " Легко заметить, что датафрейм состоит из трёх Series: Город, Год основания и Население. "
 "Оба типа индексов можно использовать для навигации по данным.")

"метод sum() – суммирует значения по столбцам:"

dataframe = pd.DataFrame({'Ноутбуки': [341, 267, 382], 'Планшеты': [374, 503, 466]})

# выводим суммы значений по столбцам
print(dataframe.sum())

"min() и мах() – выводят минимальные и максимальные значения для каждого столбца:"

dataframe = pd.DataFrame({'Apple': [1034, 1245, 3985], 'Nvidia': [4034, 5124, 6723]})
print(dataframe.min())  # минимальные значение в столбцах
print(dataframe.max())  # максимальные значения в столбцах"

("Библиотека NumPy содержит структуры данных многомерных массивов, такие как однородные N-мерные ndarray, "
 "а также большую библиотеку функций, которые эффективно работают с этими структурами данных.")

"NumPy позволяет выполнять стандартные арифметические операции над массивами. Эти операции выполняются поэлементно, "
" то есть каждый элемент массива обрабатывается независимо. Вот несколько примеров:"


arr1 = np.array([1, 2, 3, 4, 5])
arr2 = np.array([6, 7, 8, 9, 10])

# Сложение
result_add = arr1 + arr2  # [7, 9, 11, 13, 15]

# Вычитание
result_sub = arr1 - arr2  # [-5, -5, -5, -5, -5]

# Умножение
result_mul = arr1 * arr2  # [6, 14, 24, 36, 50]

# Деление
result_div = arr1 / arr2  # [0.16666667, 0.28571429, 0.375, 0.44444444, 0.5]

print(arr1)
print(arr2)
print(result_add)
print(result_sub)
print(result_mul)
print(result_div)

("Слияние массивов NumPy предоставляет функции для слияния нескольких массивов в один. "
 "Вы можете выполнять горизонтальное и вертикальное объединение массивов.")
arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])

# Горизонтальное объединение
horizontal_stack = np.hstack((arr1, arr2))   # [1 2 3 4 5 6]

# Вертикальное объединение
vertical_stack = np.vstack((arr1, arr2))  #[[1 2 3]
                                          # [4 5 6]]

print(horizontal_stack)
print(vertical_stack)